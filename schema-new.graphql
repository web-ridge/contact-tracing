type DeviceKey {
  id: ID!
  hash: String!
  password: String!
  time: Int!
}

type InfectedEncounter {
  id: ID!
  randomPart: String!
  possibleInfectedHash: String!
  rssi: Int!
  hits: Int!
  time: Int!
  duration: Int!
}

input IDFilter {
  equalTo: ID
  notEqualTo: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFilter {
  equalTo: String
  notEqualTo: String

  in: [String!]
  notIn: [String!]

  startWith: String
  notStartWith: String

  endWith: String
  notEndWith: String

  contain: String
  notContain: String

  startWithStrict: String # Camel sensitive
  notStartWithStrict: String # Camel sensitive
  endWithStrict: String # Camel sensitive
  notEndWithStrict: String # Camel sensitive
  containStrict: String # Camel sensitive
  notContainStrict: String # Camel sensitive
}

input IntFilter {
  equalTo: Int
  notEqualTo: Int
  lessThan: Int
  lessThanOrEqualTo: Int
  moreThan: Int
  moreThanOrEqualTo: Int
  in: [Int!]
  notIn: [Int!]
}

input FloatFilter {
  equalTo: Float
  notEqualTo: Float
  lessThan: Float
  lessThanOrEqualTo: Float
  moreThan: Float
  moreThanOrEqualTo: Float
  in: [Float!]
  notIn: [Float!]
}

input BooleanFilter {
  isTrue: Boolean
  isFalse: Boolean
  isNull: Boolean
}

input DeviceKeyFilter {
  search: String
  where: DeviceKeyWhere
}

input DeviceKeyWhere {
  id: IDFilter
  hash: StringFilter
  password: StringFilter
  time: IntFilter
  or: DeviceKeyWhere
  and: DeviceKeyWhere
}

input InfectedEncounterFilter {
  search: String
  where: InfectedEncounterWhere
}

input InfectedEncounterWhere {
  id: IDFilter
  randomPart: StringFilter
  possibleInfectedHash: StringFilter
  rssi: IntFilter
  hits: IntFilter
  time: IntFilter
  duration: IntFilter
  or: InfectedEncounterWhere
  and: InfectedEncounterWhere
}

type Query {
  deviceKey(id: ID!): DeviceKey!
  deviceKeys(filter: DeviceKeyFilter): [DeviceKey!]!
  infectedEncounter(id: ID!): InfectedEncounter!
  infectedEncounters(filter: InfectedEncounterFilter): [InfectedEncounter!]!
}

input DeviceKeyCreateInput {
  hash: String!
  password: String!
  time: Int!
}

input DeviceKeyUpdateInput {
  hash: String
  password: String
  time: Int
}

input DeviceKeysCreateInput {
  deviceKeys: [DeviceKeyCreateInput!]!
}

type DeviceKeyPayload {
  deviceKey: DeviceKey!
}

type DeviceKeyDeletePayload {
  id: ID!
}

type DeviceKeysPayload {
  deviceKeys: [DeviceKey!]!
}

type DeviceKeysDeletePayload {
  ids: [ID!]!
}

type DeviceKeysUpdatePayload {
  ok: Boolean!
}

input InfectedEncounterCreateInput {
  randomPart: String!
  possibleInfectedHash: String!
  rssi: Int!
  hits: Int!
  time: Int!
  duration: Int!
}

input InfectedEncounterUpdateInput {
  randomPart: String
  possibleInfectedHash: String
  rssi: Int
  hits: Int
  time: Int
  duration: Int
}

input InfectedEncountersCreateInput {
  infectedEncounters: [InfectedEncounterCreateInput!]!
}

type InfectedEncounterPayload {
  infectedEncounter: InfectedEncounter!
}

type InfectedEncounterDeletePayload {
  id: ID!
}

type InfectedEncountersPayload {
  infectedEncounters: [InfectedEncounter!]!
}

type InfectedEncountersDeletePayload {
  ids: [ID!]!
}

type InfectedEncountersUpdatePayload {
  ok: Boolean!
}

type Mutation {
  createDeviceKey(input: DeviceKeyCreateInput!): DeviceKeyPayload!
  createDeviceKeys(input: DeviceKeysCreateInput!): DeviceKeysPayload!
  updateDeviceKey(id: ID!, input: DeviceKeyUpdateInput!): DeviceKeyPayload!
  updateDeviceKeys(
    filter: DeviceKeyFilter
    input: DeviceKeyUpdateInput!
  ): DeviceKeysUpdatePayload!
  deleteDeviceKey(id: ID!): DeviceKeyDeletePayload!
  deleteDeviceKeys(filter: DeviceKeyFilter): DeviceKeysDeletePayload!
  createInfectedEncounter(
    input: InfectedEncounterCreateInput!
  ): InfectedEncounterPayload!
  createInfectedEncounters(
    input: InfectedEncountersCreateInput!
  ): InfectedEncountersPayload!
  updateInfectedEncounter(
    id: ID!
    input: InfectedEncounterUpdateInput!
  ): InfectedEncounterPayload!
  updateInfectedEncounters(
    filter: InfectedEncounterFilter
    input: InfectedEncounterUpdateInput!
  ): InfectedEncountersUpdatePayload!
  deleteInfectedEncounter(id: ID!): InfectedEncounterDeletePayload!
  deleteInfectedEncounters(
    filter: InfectedEncounterFilter
  ): InfectedEncountersDeletePayload!
}
