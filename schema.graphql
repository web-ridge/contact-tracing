enum Risk {
  HIGH_RISK
  MIDDLE_RISK
  LOW_RISK
}

type InfectionAlert {
  howManyEncounters: Int!
  risk: Risk!
}

type Query {
  infectedEncounters(
    deviceHashesOfMyOwn: [DeviceKeyParam!]! # User own device hashes over 2 week period
  ): [InfectionAlert]!
}

# InfectionCreateKey is generated by the local institute which sees user has tested
# positive this is not tracable to a specific user
type InfectionCreateKey {
  key: String!
  password: String!
}

# InfectionCreateKeyInput is sent by user. Scanned by user via QR-code or link via mail
input InfectionCreateKeyInput {
  key: String!
  password: String!
}

# DeviceKeyparams can only be sent by the user owning these keys
# These were synced with the backend from their phone
input DeviceKeyParam {
  hash: String! # hash of random generated id
  password: String! # password of this key to fetch infectedEncounters or to remove
}

input InfectedEncounterCreateInput {
  possibleInfectedHash: String!
  rssi: Int!
  hits: Int!
  time: Int!
  duration: Int!
}

input InfectedEncountersCreateInput {
  infectionCreateKey: InfectionCreateKeyInput!
  infectedEncounters: [InfectedEncounterCreateInput!]!
}

input DeviceKeyCreateInput {
  hash: String!
  password: String!
  time: Int!
}

type OkPayload {
  ok: Boolean!
}

type Mutation {
  # Let Android user share their contactmoments no trace back to user will be saved!
  createInfectedEncounters(input: InfectedEncountersCreateInput!): OkPayload!

  # User generated a device key and password so know this uuid really belongs to that user
  createDeviceKey(input: DeviceKeyCreateInput!): OkPayload!

  ## AVG -> User should be able to always remove all their data from server
  # Let user remove infected encounters on their device keys from database (AVG)
  deleteInfectedEncountersOnKeys(keys: [DeviceKeyParam!]!): OkPayload!
  removeDeviceKeys(keys: [DeviceKeyParam!]!): OkPayload!

  ## This is a unique code so user can insert an infection
  ## GGD needs to call this function to generate infection code
  ## TODO: option for sending email or letter
  createInfectionCreateKey(
    singleSignOnKey: String!
    singleSignOnSecondKey: String!
  ): InfectionCreateKey

  # Used for development of app because we don't work yet together with GGD
  createInfectionCreateKeyUnauthorized: InfectionCreateKey
}
