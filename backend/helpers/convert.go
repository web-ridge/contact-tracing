// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package helpers

import (
	"github.com/volatiletech/null"
	"github.com/web-ridge/contact-tracing/backend/graphql_models"
	"github.com/web-ridge/contact-tracing/backend/models"
)

func alreadyConverted(roots []interface{}, check interface{}) bool {
	var matched int
	for _, root := range roots {
		if root == check {
			matched++
		}
	}
	return matched > 2
}

func InfectionCreateKeyWithUintID(id uint) *graphql_models.InfectionCreateKey {
	return &graphql_models.InfectionCreateKey{
		ID: InfectionCreateKeyIDToGraphQL(id),
	}
}

func InfectionCreateKeyWithIntID(id int) *graphql_models.InfectionCreateKey {
	return InfectionCreateKeyWithUintID(uint(id))
}

func InfectionCreateKeyWithNullDotUintID(id null.Uint) *graphql_models.InfectionCreateKey {
	return InfectionCreateKeyWithUintID(id.Uint)
}

func InfectionCreateKeyWithNullDotIntID(id null.Int) *graphql_models.InfectionCreateKey {
	return InfectionCreateKeyWithUintID(uint(id.Int))
}

func InfectionCreateKeysToGraphQL(am []*models.InfectionCreateKey, roots []interface{}) []*graphql_models.InfectionCreateKey {
	ar := make([]*graphql_models.InfectionCreateKey, len(am))
	for i, m := range am {
		ar[i] = InfectionCreateKeyToGraphQL(m, append(roots, m))
	}
	return ar
}

func InfectionCreateKeyToGraphQL(m *models.InfectionCreateKey, roots []interface{}) *graphql_models.InfectionCreateKey {
	if m == nil {
		return nil
	}

	r := &graphql_models.InfectionCreateKey{

		Key:      m.Key,
		Password: m.Password,
	}

	return r
}
