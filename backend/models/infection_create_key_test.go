// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInfectionCreateKeys(t *testing.T) {
	t.Parallel()

	query := InfectionCreateKeys()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInfectionCreateKeysDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectionCreateKey{}
	if err = randomize.Struct(seed, o, infectionCreateKeyDBTypes, true, infectionCreateKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InfectionCreateKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInfectionCreateKeysQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectionCreateKey{}
	if err = randomize.Struct(seed, o, infectionCreateKeyDBTypes, true, infectionCreateKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := InfectionCreateKeys().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InfectionCreateKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInfectionCreateKeysSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectionCreateKey{}
	if err = randomize.Struct(seed, o, infectionCreateKeyDBTypes, true, infectionCreateKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InfectionCreateKeySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InfectionCreateKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInfectionCreateKeysExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectionCreateKey{}
	if err = randomize.Struct(seed, o, infectionCreateKeyDBTypes, true, infectionCreateKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InfectionCreateKeyExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if InfectionCreateKey exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InfectionCreateKeyExists to return true, but got false.")
	}
}

func testInfectionCreateKeysFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectionCreateKey{}
	if err = randomize.Struct(seed, o, infectionCreateKeyDBTypes, true, infectionCreateKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	infectionCreateKeyFound, err := FindInfectionCreateKey(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if infectionCreateKeyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInfectionCreateKeysBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectionCreateKey{}
	if err = randomize.Struct(seed, o, infectionCreateKeyDBTypes, true, infectionCreateKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = InfectionCreateKeys().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInfectionCreateKeysOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectionCreateKey{}
	if err = randomize.Struct(seed, o, infectionCreateKeyDBTypes, true, infectionCreateKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := InfectionCreateKeys().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInfectionCreateKeysAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	infectionCreateKeyOne := &InfectionCreateKey{}
	infectionCreateKeyTwo := &InfectionCreateKey{}
	if err = randomize.Struct(seed, infectionCreateKeyOne, infectionCreateKeyDBTypes, false, infectionCreateKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}
	if err = randomize.Struct(seed, infectionCreateKeyTwo, infectionCreateKeyDBTypes, false, infectionCreateKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = infectionCreateKeyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = infectionCreateKeyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InfectionCreateKeys().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInfectionCreateKeysCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	infectionCreateKeyOne := &InfectionCreateKey{}
	infectionCreateKeyTwo := &InfectionCreateKey{}
	if err = randomize.Struct(seed, infectionCreateKeyOne, infectionCreateKeyDBTypes, false, infectionCreateKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}
	if err = randomize.Struct(seed, infectionCreateKeyTwo, infectionCreateKeyDBTypes, false, infectionCreateKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = infectionCreateKeyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = infectionCreateKeyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InfectionCreateKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func infectionCreateKeyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *InfectionCreateKey) error {
	*o = InfectionCreateKey{}
	return nil
}

func infectionCreateKeyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *InfectionCreateKey) error {
	*o = InfectionCreateKey{}
	return nil
}

func infectionCreateKeyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *InfectionCreateKey) error {
	*o = InfectionCreateKey{}
	return nil
}

func infectionCreateKeyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InfectionCreateKey) error {
	*o = InfectionCreateKey{}
	return nil
}

func infectionCreateKeyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InfectionCreateKey) error {
	*o = InfectionCreateKey{}
	return nil
}

func infectionCreateKeyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InfectionCreateKey) error {
	*o = InfectionCreateKey{}
	return nil
}

func infectionCreateKeyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InfectionCreateKey) error {
	*o = InfectionCreateKey{}
	return nil
}

func infectionCreateKeyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InfectionCreateKey) error {
	*o = InfectionCreateKey{}
	return nil
}

func infectionCreateKeyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InfectionCreateKey) error {
	*o = InfectionCreateKey{}
	return nil
}

func testInfectionCreateKeysHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &InfectionCreateKey{}
	o := &InfectionCreateKey{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, infectionCreateKeyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey object: %s", err)
	}

	AddInfectionCreateKeyHook(boil.BeforeInsertHook, infectionCreateKeyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	infectionCreateKeyBeforeInsertHooks = []InfectionCreateKeyHook{}

	AddInfectionCreateKeyHook(boil.AfterInsertHook, infectionCreateKeyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	infectionCreateKeyAfterInsertHooks = []InfectionCreateKeyHook{}

	AddInfectionCreateKeyHook(boil.AfterSelectHook, infectionCreateKeyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	infectionCreateKeyAfterSelectHooks = []InfectionCreateKeyHook{}

	AddInfectionCreateKeyHook(boil.BeforeUpdateHook, infectionCreateKeyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	infectionCreateKeyBeforeUpdateHooks = []InfectionCreateKeyHook{}

	AddInfectionCreateKeyHook(boil.AfterUpdateHook, infectionCreateKeyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	infectionCreateKeyAfterUpdateHooks = []InfectionCreateKeyHook{}

	AddInfectionCreateKeyHook(boil.BeforeDeleteHook, infectionCreateKeyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	infectionCreateKeyBeforeDeleteHooks = []InfectionCreateKeyHook{}

	AddInfectionCreateKeyHook(boil.AfterDeleteHook, infectionCreateKeyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	infectionCreateKeyAfterDeleteHooks = []InfectionCreateKeyHook{}

	AddInfectionCreateKeyHook(boil.BeforeUpsertHook, infectionCreateKeyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	infectionCreateKeyBeforeUpsertHooks = []InfectionCreateKeyHook{}

	AddInfectionCreateKeyHook(boil.AfterUpsertHook, infectionCreateKeyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	infectionCreateKeyAfterUpsertHooks = []InfectionCreateKeyHook{}
}

func testInfectionCreateKeysInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectionCreateKey{}
	if err = randomize.Struct(seed, o, infectionCreateKeyDBTypes, true, infectionCreateKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InfectionCreateKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInfectionCreateKeysInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectionCreateKey{}
	if err = randomize.Struct(seed, o, infectionCreateKeyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(infectionCreateKeyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := InfectionCreateKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInfectionCreateKeysReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectionCreateKey{}
	if err = randomize.Struct(seed, o, infectionCreateKeyDBTypes, true, infectionCreateKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInfectionCreateKeysReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectionCreateKey{}
	if err = randomize.Struct(seed, o, infectionCreateKeyDBTypes, true, infectionCreateKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InfectionCreateKeySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInfectionCreateKeysSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectionCreateKey{}
	if err = randomize.Struct(seed, o, infectionCreateKeyDBTypes, true, infectionCreateKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InfectionCreateKeys().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	infectionCreateKeyDBTypes = map[string]string{`ID`: `integer`, `Key`: `text`, `Password`: `text`, `Time`: `integer`}
	_                         = bytes.MinRead
)

func testInfectionCreateKeysUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(infectionCreateKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(infectionCreateKeyAllColumns) == len(infectionCreateKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InfectionCreateKey{}
	if err = randomize.Struct(seed, o, infectionCreateKeyDBTypes, true, infectionCreateKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InfectionCreateKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, infectionCreateKeyDBTypes, true, infectionCreateKeyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInfectionCreateKeysSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(infectionCreateKeyAllColumns) == len(infectionCreateKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InfectionCreateKey{}
	if err = randomize.Struct(seed, o, infectionCreateKeyDBTypes, true, infectionCreateKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InfectionCreateKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, infectionCreateKeyDBTypes, true, infectionCreateKeyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(infectionCreateKeyAllColumns, infectionCreateKeyPrimaryKeyColumns) {
		fields = infectionCreateKeyAllColumns
	} else {
		fields = strmangle.SetComplement(
			infectionCreateKeyAllColumns,
			infectionCreateKeyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InfectionCreateKeySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInfectionCreateKeysUpsert(t *testing.T) {
	t.Parallel()

	if len(infectionCreateKeyAllColumns) == len(infectionCreateKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := InfectionCreateKey{}
	if err = randomize.Struct(seed, &o, infectionCreateKeyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InfectionCreateKey: %s", err)
	}

	count, err := InfectionCreateKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, infectionCreateKeyDBTypes, false, infectionCreateKeyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InfectionCreateKey struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InfectionCreateKey: %s", err)
	}

	count, err = InfectionCreateKeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
