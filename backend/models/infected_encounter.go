// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// InfectedEncounter is an object representing the database table.
type InfectedEncounter struct {
	ID                   int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	StartOfCreatorHash   null.String `boil:"start_of_creator_hash" json:"start_of_creator_hash,omitempty" toml:"start_of_creator_hash" yaml:"start_of_creator_hash,omitempty"`
	PossibleInfectedHash null.String `boil:"possible_infected_hash" json:"possible_infected_hash,omitempty" toml:"possible_infected_hash" yaml:"possible_infected_hash,omitempty"`
	Rssi                 null.Int    `boil:"rssi" json:"rssi,omitempty" toml:"rssi" yaml:"rssi,omitempty"`
	Hits                 null.Int    `boil:"hits" json:"hits,omitempty" toml:"hits" yaml:"hits,omitempty"`
	Time                 null.Time   `boil:"time" json:"time,omitempty" toml:"time" yaml:"time,omitempty"`

	R *infectedEncounterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L infectedEncounterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InfectedEncounterColumns = struct {
	ID                   string
	StartOfCreatorHash   string
	PossibleInfectedHash string
	Rssi                 string
	Hits                 string
	Time                 string
}{
	ID:                   "id",
	StartOfCreatorHash:   "start_of_creator_hash",
	PossibleInfectedHash: "possible_infected_hash",
	Rssi:                 "rssi",
	Hits:                 "hits",
	Time:                 "time",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var InfectedEncounterWhere = struct {
	ID                   whereHelperint
	StartOfCreatorHash   whereHelpernull_String
	PossibleInfectedHash whereHelpernull_String
	Rssi                 whereHelpernull_Int
	Hits                 whereHelpernull_Int
	Time                 whereHelpernull_Time
}{
	ID:                   whereHelperint{field: "\"infected_encounter\".\"id\""},
	StartOfCreatorHash:   whereHelpernull_String{field: "\"infected_encounter\".\"start_of_creator_hash\""},
	PossibleInfectedHash: whereHelpernull_String{field: "\"infected_encounter\".\"possible_infected_hash\""},
	Rssi:                 whereHelpernull_Int{field: "\"infected_encounter\".\"rssi\""},
	Hits:                 whereHelpernull_Int{field: "\"infected_encounter\".\"hits\""},
	Time:                 whereHelpernull_Time{field: "\"infected_encounter\".\"time\""},
}

// InfectedEncounterRels is where relationship names are stored.
var InfectedEncounterRels = struct {
}{}

// infectedEncounterR is where relationships are stored.
type infectedEncounterR struct {
}

// NewStruct creates a new relationship struct
func (*infectedEncounterR) NewStruct() *infectedEncounterR {
	return &infectedEncounterR{}
}

// infectedEncounterL is where Load methods for each relationship are stored.
type infectedEncounterL struct{}

var (
	infectedEncounterAllColumns            = []string{"id", "start_of_creator_hash", "possible_infected_hash", "rssi", "hits", "time"}
	infectedEncounterColumnsWithoutDefault = []string{"start_of_creator_hash", "possible_infected_hash", "rssi", "hits", "time"}
	infectedEncounterColumnsWithDefault    = []string{"id"}
	infectedEncounterPrimaryKeyColumns     = []string{"id"}
)

type (
	// InfectedEncounterSlice is an alias for a slice of pointers to InfectedEncounter.
	// This should generally be used opposed to []InfectedEncounter.
	InfectedEncounterSlice []*InfectedEncounter
	// InfectedEncounterHook is the signature for custom InfectedEncounter hook methods
	InfectedEncounterHook func(context.Context, boil.ContextExecutor, *InfectedEncounter) error

	infectedEncounterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	infectedEncounterType                 = reflect.TypeOf(&InfectedEncounter{})
	infectedEncounterMapping              = queries.MakeStructMapping(infectedEncounterType)
	infectedEncounterPrimaryKeyMapping, _ = queries.BindMapping(infectedEncounterType, infectedEncounterMapping, infectedEncounterPrimaryKeyColumns)
	infectedEncounterInsertCacheMut       sync.RWMutex
	infectedEncounterInsertCache          = make(map[string]insertCache)
	infectedEncounterUpdateCacheMut       sync.RWMutex
	infectedEncounterUpdateCache          = make(map[string]updateCache)
	infectedEncounterUpsertCacheMut       sync.RWMutex
	infectedEncounterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var infectedEncounterBeforeInsertHooks []InfectedEncounterHook
var infectedEncounterBeforeUpdateHooks []InfectedEncounterHook
var infectedEncounterBeforeDeleteHooks []InfectedEncounterHook
var infectedEncounterBeforeUpsertHooks []InfectedEncounterHook

var infectedEncounterAfterInsertHooks []InfectedEncounterHook
var infectedEncounterAfterSelectHooks []InfectedEncounterHook
var infectedEncounterAfterUpdateHooks []InfectedEncounterHook
var infectedEncounterAfterDeleteHooks []InfectedEncounterHook
var infectedEncounterAfterUpsertHooks []InfectedEncounterHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InfectedEncounter) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range infectedEncounterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InfectedEncounter) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range infectedEncounterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InfectedEncounter) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range infectedEncounterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InfectedEncounter) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range infectedEncounterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InfectedEncounter) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range infectedEncounterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InfectedEncounter) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range infectedEncounterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InfectedEncounter) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range infectedEncounterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InfectedEncounter) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range infectedEncounterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InfectedEncounter) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range infectedEncounterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInfectedEncounterHook registers your hook function for all future operations.
func AddInfectedEncounterHook(hookPoint boil.HookPoint, infectedEncounterHook InfectedEncounterHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		infectedEncounterBeforeInsertHooks = append(infectedEncounterBeforeInsertHooks, infectedEncounterHook)
	case boil.BeforeUpdateHook:
		infectedEncounterBeforeUpdateHooks = append(infectedEncounterBeforeUpdateHooks, infectedEncounterHook)
	case boil.BeforeDeleteHook:
		infectedEncounterBeforeDeleteHooks = append(infectedEncounterBeforeDeleteHooks, infectedEncounterHook)
	case boil.BeforeUpsertHook:
		infectedEncounterBeforeUpsertHooks = append(infectedEncounterBeforeUpsertHooks, infectedEncounterHook)
	case boil.AfterInsertHook:
		infectedEncounterAfterInsertHooks = append(infectedEncounterAfterInsertHooks, infectedEncounterHook)
	case boil.AfterSelectHook:
		infectedEncounterAfterSelectHooks = append(infectedEncounterAfterSelectHooks, infectedEncounterHook)
	case boil.AfterUpdateHook:
		infectedEncounterAfterUpdateHooks = append(infectedEncounterAfterUpdateHooks, infectedEncounterHook)
	case boil.AfterDeleteHook:
		infectedEncounterAfterDeleteHooks = append(infectedEncounterAfterDeleteHooks, infectedEncounterHook)
	case boil.AfterUpsertHook:
		infectedEncounterAfterUpsertHooks = append(infectedEncounterAfterUpsertHooks, infectedEncounterHook)
	}
}

// One returns a single infectedEncounter record from the query.
func (q infectedEncounterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InfectedEncounter, error) {
	o := &InfectedEncounter{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for infected_encounter")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InfectedEncounter records from the query.
func (q infectedEncounterQuery) All(ctx context.Context, exec boil.ContextExecutor) (InfectedEncounterSlice, error) {
	var o []*InfectedEncounter

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InfectedEncounter slice")
	}

	if len(infectedEncounterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InfectedEncounter records in the query.
func (q infectedEncounterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count infected_encounter rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q infectedEncounterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if infected_encounter exists")
	}

	return count > 0, nil
}

// InfectedEncounters retrieves all the records using an executor.
func InfectedEncounters(mods ...qm.QueryMod) infectedEncounterQuery {
	mods = append(mods, qm.From("\"infected_encounter\""))
	return infectedEncounterQuery{NewQuery(mods...)}
}

// FindInfectedEncounter retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInfectedEncounter(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*InfectedEncounter, error) {
	infectedEncounterObj := &InfectedEncounter{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"infected_encounter\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, infectedEncounterObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from infected_encounter")
	}

	return infectedEncounterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InfectedEncounter) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no infected_encounter provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(infectedEncounterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	infectedEncounterInsertCacheMut.RLock()
	cache, cached := infectedEncounterInsertCache[key]
	infectedEncounterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			infectedEncounterAllColumns,
			infectedEncounterColumnsWithDefault,
			infectedEncounterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(infectedEncounterType, infectedEncounterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(infectedEncounterType, infectedEncounterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"infected_encounter\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"infected_encounter\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into infected_encounter")
	}

	if !cached {
		infectedEncounterInsertCacheMut.Lock()
		infectedEncounterInsertCache[key] = cache
		infectedEncounterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InfectedEncounter.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InfectedEncounter) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	infectedEncounterUpdateCacheMut.RLock()
	cache, cached := infectedEncounterUpdateCache[key]
	infectedEncounterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			infectedEncounterAllColumns,
			infectedEncounterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update infected_encounter, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"infected_encounter\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, infectedEncounterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(infectedEncounterType, infectedEncounterMapping, append(wl, infectedEncounterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update infected_encounter row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for infected_encounter")
	}

	if !cached {
		infectedEncounterUpdateCacheMut.Lock()
		infectedEncounterUpdateCache[key] = cache
		infectedEncounterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q infectedEncounterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for infected_encounter")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for infected_encounter")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InfectedEncounterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), infectedEncounterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"infected_encounter\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, infectedEncounterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in infectedEncounter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all infectedEncounter")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InfectedEncounter) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no infected_encounter provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(infectedEncounterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	infectedEncounterUpsertCacheMut.RLock()
	cache, cached := infectedEncounterUpsertCache[key]
	infectedEncounterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			infectedEncounterAllColumns,
			infectedEncounterColumnsWithDefault,
			infectedEncounterColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			infectedEncounterAllColumns,
			infectedEncounterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert infected_encounter, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(infectedEncounterPrimaryKeyColumns))
			copy(conflict, infectedEncounterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"infected_encounter\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(infectedEncounterType, infectedEncounterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(infectedEncounterType, infectedEncounterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert infected_encounter")
	}

	if !cached {
		infectedEncounterUpsertCacheMut.Lock()
		infectedEncounterUpsertCache[key] = cache
		infectedEncounterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single InfectedEncounter record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InfectedEncounter) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no InfectedEncounter provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), infectedEncounterPrimaryKeyMapping)
	sql := "DELETE FROM \"infected_encounter\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from infected_encounter")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for infected_encounter")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q infectedEncounterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no infectedEncounterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from infected_encounter")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for infected_encounter")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InfectedEncounterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(infectedEncounterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), infectedEncounterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"infected_encounter\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, infectedEncounterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from infectedEncounter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for infected_encounter")
	}

	if len(infectedEncounterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InfectedEncounter) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInfectedEncounter(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InfectedEncounterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InfectedEncounterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), infectedEncounterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"infected_encounter\".* FROM \"infected_encounter\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, infectedEncounterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InfectedEncounterSlice")
	}

	*o = slice

	return nil
}

// InfectedEncounterExists checks if the InfectedEncounter row exists.
func InfectedEncounterExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"infected_encounter\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if infected_encounter exists")
	}

	return exists, nil
}
