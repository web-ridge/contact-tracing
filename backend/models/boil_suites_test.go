// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("DeviceKeys", testDeviceKeys)
	t.Run("InfectedEncounters", testInfectedEncounters)
	t.Run("InfectionCreateKeys", testInfectionCreateKeys)
}

func TestDelete(t *testing.T) {
	t.Run("DeviceKeys", testDeviceKeysDelete)
	t.Run("InfectedEncounters", testInfectedEncountersDelete)
	t.Run("InfectionCreateKeys", testInfectionCreateKeysDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("DeviceKeys", testDeviceKeysQueryDeleteAll)
	t.Run("InfectedEncounters", testInfectedEncountersQueryDeleteAll)
	t.Run("InfectionCreateKeys", testInfectionCreateKeysQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("DeviceKeys", testDeviceKeysSliceDeleteAll)
	t.Run("InfectedEncounters", testInfectedEncountersSliceDeleteAll)
	t.Run("InfectionCreateKeys", testInfectionCreateKeysSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("DeviceKeys", testDeviceKeysExists)
	t.Run("InfectedEncounters", testInfectedEncountersExists)
	t.Run("InfectionCreateKeys", testInfectionCreateKeysExists)
}

func TestFind(t *testing.T) {
	t.Run("DeviceKeys", testDeviceKeysFind)
	t.Run("InfectedEncounters", testInfectedEncountersFind)
	t.Run("InfectionCreateKeys", testInfectionCreateKeysFind)
}

func TestBind(t *testing.T) {
	t.Run("DeviceKeys", testDeviceKeysBind)
	t.Run("InfectedEncounters", testInfectedEncountersBind)
	t.Run("InfectionCreateKeys", testInfectionCreateKeysBind)
}

func TestOne(t *testing.T) {
	t.Run("DeviceKeys", testDeviceKeysOne)
	t.Run("InfectedEncounters", testInfectedEncountersOne)
	t.Run("InfectionCreateKeys", testInfectionCreateKeysOne)
}

func TestAll(t *testing.T) {
	t.Run("DeviceKeys", testDeviceKeysAll)
	t.Run("InfectedEncounters", testInfectedEncountersAll)
	t.Run("InfectionCreateKeys", testInfectionCreateKeysAll)
}

func TestCount(t *testing.T) {
	t.Run("DeviceKeys", testDeviceKeysCount)
	t.Run("InfectedEncounters", testInfectedEncountersCount)
	t.Run("InfectionCreateKeys", testInfectionCreateKeysCount)
}

func TestHooks(t *testing.T) {
	t.Run("DeviceKeys", testDeviceKeysHooks)
	t.Run("InfectedEncounters", testInfectedEncountersHooks)
	t.Run("InfectionCreateKeys", testInfectionCreateKeysHooks)
}

func TestInsert(t *testing.T) {
	t.Run("DeviceKeys", testDeviceKeysInsert)
	t.Run("DeviceKeys", testDeviceKeysInsertWhitelist)
	t.Run("InfectedEncounters", testInfectedEncountersInsert)
	t.Run("InfectedEncounters", testInfectedEncountersInsertWhitelist)
	t.Run("InfectionCreateKeys", testInfectionCreateKeysInsert)
	t.Run("InfectionCreateKeys", testInfectionCreateKeysInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("DeviceKeys", testDeviceKeysReload)
	t.Run("InfectedEncounters", testInfectedEncountersReload)
	t.Run("InfectionCreateKeys", testInfectionCreateKeysReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("DeviceKeys", testDeviceKeysReloadAll)
	t.Run("InfectedEncounters", testInfectedEncountersReloadAll)
	t.Run("InfectionCreateKeys", testInfectionCreateKeysReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("DeviceKeys", testDeviceKeysSelect)
	t.Run("InfectedEncounters", testInfectedEncountersSelect)
	t.Run("InfectionCreateKeys", testInfectionCreateKeysSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("DeviceKeys", testDeviceKeysUpdate)
	t.Run("InfectedEncounters", testInfectedEncountersUpdate)
	t.Run("InfectionCreateKeys", testInfectionCreateKeysUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("DeviceKeys", testDeviceKeysSliceUpdateAll)
	t.Run("InfectedEncounters", testInfectedEncountersSliceUpdateAll)
	t.Run("InfectionCreateKeys", testInfectionCreateKeysSliceUpdateAll)
}
