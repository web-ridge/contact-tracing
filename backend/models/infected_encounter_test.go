// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInfectedEncounters(t *testing.T) {
	t.Parallel()

	query := InfectedEncounters()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInfectedEncountersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectedEncounter{}
	if err = randomize.Struct(seed, o, infectedEncounterDBTypes, true, infectedEncounterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InfectedEncounters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInfectedEncountersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectedEncounter{}
	if err = randomize.Struct(seed, o, infectedEncounterDBTypes, true, infectedEncounterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := InfectedEncounters().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InfectedEncounters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInfectedEncountersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectedEncounter{}
	if err = randomize.Struct(seed, o, infectedEncounterDBTypes, true, infectedEncounterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InfectedEncounterSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InfectedEncounters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInfectedEncountersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectedEncounter{}
	if err = randomize.Struct(seed, o, infectedEncounterDBTypes, true, infectedEncounterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InfectedEncounterExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if InfectedEncounter exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InfectedEncounterExists to return true, but got false.")
	}
}

func testInfectedEncountersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectedEncounter{}
	if err = randomize.Struct(seed, o, infectedEncounterDBTypes, true, infectedEncounterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	infectedEncounterFound, err := FindInfectedEncounter(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if infectedEncounterFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInfectedEncountersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectedEncounter{}
	if err = randomize.Struct(seed, o, infectedEncounterDBTypes, true, infectedEncounterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = InfectedEncounters().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInfectedEncountersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectedEncounter{}
	if err = randomize.Struct(seed, o, infectedEncounterDBTypes, true, infectedEncounterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := InfectedEncounters().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInfectedEncountersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	infectedEncounterOne := &InfectedEncounter{}
	infectedEncounterTwo := &InfectedEncounter{}
	if err = randomize.Struct(seed, infectedEncounterOne, infectedEncounterDBTypes, false, infectedEncounterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}
	if err = randomize.Struct(seed, infectedEncounterTwo, infectedEncounterDBTypes, false, infectedEncounterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = infectedEncounterOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = infectedEncounterTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InfectedEncounters().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInfectedEncountersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	infectedEncounterOne := &InfectedEncounter{}
	infectedEncounterTwo := &InfectedEncounter{}
	if err = randomize.Struct(seed, infectedEncounterOne, infectedEncounterDBTypes, false, infectedEncounterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}
	if err = randomize.Struct(seed, infectedEncounterTwo, infectedEncounterDBTypes, false, infectedEncounterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = infectedEncounterOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = infectedEncounterTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InfectedEncounters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func infectedEncounterBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *InfectedEncounter) error {
	*o = InfectedEncounter{}
	return nil
}

func infectedEncounterAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *InfectedEncounter) error {
	*o = InfectedEncounter{}
	return nil
}

func infectedEncounterAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *InfectedEncounter) error {
	*o = InfectedEncounter{}
	return nil
}

func infectedEncounterBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InfectedEncounter) error {
	*o = InfectedEncounter{}
	return nil
}

func infectedEncounterAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InfectedEncounter) error {
	*o = InfectedEncounter{}
	return nil
}

func infectedEncounterBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InfectedEncounter) error {
	*o = InfectedEncounter{}
	return nil
}

func infectedEncounterAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InfectedEncounter) error {
	*o = InfectedEncounter{}
	return nil
}

func infectedEncounterBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InfectedEncounter) error {
	*o = InfectedEncounter{}
	return nil
}

func infectedEncounterAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InfectedEncounter) error {
	*o = InfectedEncounter{}
	return nil
}

func testInfectedEncountersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &InfectedEncounter{}
	o := &InfectedEncounter{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, infectedEncounterDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter object: %s", err)
	}

	AddInfectedEncounterHook(boil.BeforeInsertHook, infectedEncounterBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	infectedEncounterBeforeInsertHooks = []InfectedEncounterHook{}

	AddInfectedEncounterHook(boil.AfterInsertHook, infectedEncounterAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	infectedEncounterAfterInsertHooks = []InfectedEncounterHook{}

	AddInfectedEncounterHook(boil.AfterSelectHook, infectedEncounterAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	infectedEncounterAfterSelectHooks = []InfectedEncounterHook{}

	AddInfectedEncounterHook(boil.BeforeUpdateHook, infectedEncounterBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	infectedEncounterBeforeUpdateHooks = []InfectedEncounterHook{}

	AddInfectedEncounterHook(boil.AfterUpdateHook, infectedEncounterAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	infectedEncounterAfterUpdateHooks = []InfectedEncounterHook{}

	AddInfectedEncounterHook(boil.BeforeDeleteHook, infectedEncounterBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	infectedEncounterBeforeDeleteHooks = []InfectedEncounterHook{}

	AddInfectedEncounterHook(boil.AfterDeleteHook, infectedEncounterAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	infectedEncounterAfterDeleteHooks = []InfectedEncounterHook{}

	AddInfectedEncounterHook(boil.BeforeUpsertHook, infectedEncounterBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	infectedEncounterBeforeUpsertHooks = []InfectedEncounterHook{}

	AddInfectedEncounterHook(boil.AfterUpsertHook, infectedEncounterAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	infectedEncounterAfterUpsertHooks = []InfectedEncounterHook{}
}

func testInfectedEncountersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectedEncounter{}
	if err = randomize.Struct(seed, o, infectedEncounterDBTypes, true, infectedEncounterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InfectedEncounters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInfectedEncountersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectedEncounter{}
	if err = randomize.Struct(seed, o, infectedEncounterDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(infectedEncounterColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := InfectedEncounters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInfectedEncountersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectedEncounter{}
	if err = randomize.Struct(seed, o, infectedEncounterDBTypes, true, infectedEncounterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInfectedEncountersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectedEncounter{}
	if err = randomize.Struct(seed, o, infectedEncounterDBTypes, true, infectedEncounterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InfectedEncounterSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInfectedEncountersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InfectedEncounter{}
	if err = randomize.Struct(seed, o, infectedEncounterDBTypes, true, infectedEncounterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InfectedEncounters().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	infectedEncounterDBTypes = map[string]string{`ID`: `integer`, `RandomPart`: `text`, `PossibleInfectedHash`: `text`, `Rssi`: `integer`, `Hits`: `integer`, `Time`: `integer`, `Duration`: `integer`}
	_                        = bytes.MinRead
)

func testInfectedEncountersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(infectedEncounterPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(infectedEncounterAllColumns) == len(infectedEncounterPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InfectedEncounter{}
	if err = randomize.Struct(seed, o, infectedEncounterDBTypes, true, infectedEncounterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InfectedEncounters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, infectedEncounterDBTypes, true, infectedEncounterPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInfectedEncountersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(infectedEncounterAllColumns) == len(infectedEncounterPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InfectedEncounter{}
	if err = randomize.Struct(seed, o, infectedEncounterDBTypes, true, infectedEncounterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InfectedEncounters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, infectedEncounterDBTypes, true, infectedEncounterPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(infectedEncounterAllColumns, infectedEncounterPrimaryKeyColumns) {
		fields = infectedEncounterAllColumns
	} else {
		fields = strmangle.SetComplement(
			infectedEncounterAllColumns,
			infectedEncounterPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InfectedEncounterSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInfectedEncountersUpsert(t *testing.T) {
	t.Parallel()

	if len(infectedEncounterAllColumns) == len(infectedEncounterPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := InfectedEncounter{}
	if err = randomize.Struct(seed, &o, infectedEncounterDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InfectedEncounter: %s", err)
	}

	count, err := InfectedEncounters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, infectedEncounterDBTypes, false, infectedEncounterPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InfectedEncounter struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InfectedEncounter: %s", err)
	}

	count, err = InfectedEncounters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
